<?php

/**
 * @file
 */

require_once 'includes/tripal_hq.api.inc';
require_once 'includes/tripal_hq_email.inc';

/**
 * Implements hook_menu().
 */
function tripal_hq_menu() {
  /*
   * Admin can configure which emails get sent out, more stuff?
   */
  $items['admin/tripal/tripal_hq'] = [
    'title'            => 'Tripal HQ settings',
    'page callback'    => 'drupal_get_form',
    'file'             => 'includes/tripal_hq_admin_settings.form.inc',
    'access arguments' => ['access tripal_hq admin'],
    'page arguments'   => ['tripal_hq_admin_settings_form'],
  ];

  // Admin area for viewing requests.  Wildcard is the tripal_hq_submission.status.
  $items['tripal_hq/admin'] = [
    'title'            => 'Tripal HQ Admin Dashboard',
    'page callback'    => 'drupal_get_form',
    'file'             => 'includes/tripal_hq_admin_dashboard.form.inc',
    'access arguments' => ['access tripal_hq admin'],
    'page arguments'   => ['tripal_hq_admin_dashboard_form', "pending"],
    'type'             => MENU_NORMAL_ITEM,
  ];

  $items['tripal_hq/admin/pending'] = [
    'title'            => 'Pending',
    'access arguments' => ['access tripal_hq admin'],
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  ];

  $items['tripal_hq/admin/approved'] = [
    'title'            => 'Published',
    'type'             => MENU_LOCAL_TASK,
    'access arguments' => ['access tripal_hq admin'],
    'page arguments'   => ['tripal_hq_admin_dashboard_form', 'approved'],
  ];

  $items['tripal_hq/admin/all'] = [
    'title'            => 'All',
    'type'             => MENU_LOCAL_TASK,
    'access arguments' => ['access tripal_hq admin'],
    'page arguments'   => ['tripal_hq_admin_dashboard_form', NULL],
  ];

  $items['tripal_hq/admin/rejected'] = [
    'title'            => 'Rejected',
    'page arguments'   => ['tripal_hq_admin_dashboard_form', 'rejected'],
    'access arguments' => ['access tripal_hq admin'],
    'type'             => MENU_LOCAL_TASK,
  ];

  $items['tripal_hq/admin/obsolete'] = [
    'title'            => 'Obsolete',
    'page arguments'   => ['tripal_hq_admin_dashboard_form', 'obsolete'],
    'access arguments' => ['access tripal_hq admin'],
    'type'             => MENU_LOCAL_TASK,
  ];

  $items['tripal_hq/admin/approve/%'] = [
    'title'            => 'Tripal HQ Approve',
    'page callback'    => 'drupal_get_form',
    'file'             => 'includes/tripal_hq_admin_approve.form.inc',
    'access arguments' => ['access tripal_hq admin'],
    'page arguments'   => ['tripal_hq_admin_control_form', 'approve', 3],
  ];

  $items['tripal_hq/admin/reject/%'] = [
    'title'            => 'Tripal HQ Reject',
    'page callback'    => 'drupal_get_form',
    'file'             => 'includes/tripal_hq_admin_approve.form.inc',
    'access arguments' => ['access tripal_hq admin'],
    'page arguments'   => ['tripal_hq_admin_control_form', 'reject', 3],
  ];

  // Todo:  rename title to "site_name content" ro something?  Or make configurable?
  // note that we can always use drupal_set_title() in the form function.
  $items['tripal_hq/bio_data'] = [
    'title'            => 'Submit Content',
    'page callback'    => 'drupal_get_form',
    'file'             => 'includes/tripal_hq_user_dashboard.form.inc',
    'access arguments' => ['access tripal_hq user'],
    'page arguments'   => ['tripal_hq_user_dashboard_form'],
    'type'             => MENU_NORMAL_ITEM,
  ];

  // Content control (adding/deleting/editing)
  $items['tripal_hq/bio_data/add'] = [
    'title'            => 'Add new content',
    'description'      => 'Create and submit new content for review.',
    'page callback'    => 'tripal_hq_list_bundles_page',
    'access arguments' => ['access tripal_hq user'],
    'file'             => 'includes/tripal_hq_user_data.form.inc',
    'type'             => MENU_LOCAL_ACTION,
  ];

  $items['tripal_hq/bio_data/add/%'] = [
    'page callback'    => 'tripal_hq_user_entity_form',
    'page arguments'   => [3],
    'access arguments' => ['access tripal_hq user'],
    'file'             => 'includes/tripal_hq_user_data.form.inc',
  ];

  $items['tripal_hq/bio_data/edit/%/%'] = [
    'page callback'    => 'tripal_hq_user_entity_form',
    'page arguments'   => [3, 4],
    'access arguments' => [4],
    'access callback'  => 'tripal_hq_submission_access',
    'file'             => 'includes/tripal_hq_user_data.form.inc',
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function tripal_hq_permission() {
  $permissions['access tripal_hq admin'] = [
    'title'       => t('Administer tripal_HQ content'),
    'description' => t('Allow admins to view and approve content.'),
  ];

  $permissions['access tripal_hq user'] = [
    'title'       => t('Create Tripal content requests'),
    'description' => t(
      'Allow users to submit content requests, and view their content dashboard'
    ),
  ];

  // Add permissions for each content type.
  $bundles = tripal_get_content_types();
  foreach ($bundles as $bundle) {
    $permissions['propose ' . $bundle->name] = [
      'title'       => t(
        '%label: Propose Content', ['%label' => $bundle->label]
      ),
      'description' => t(
        'Allow the user to propose %label content', ['%label' => $bundle->label]
      ),
    ];
  }

  return $permissions;
}

/**
 * Determines whether a user has access to view/edit a submission.
 *
 * @param int $submission_id
 *   Submission ID.
 *
 * @return bool
 *   The submission object, or false.
 */
function tripal_hq_submission_access(int $submission_id) {
  global $user;

  // If an admin, allow access to all submissions.
  if (user_access('access tripal_hq admin')) {
    return TRUE;
  }

  // Users who don't have an appropriate role don't get to access the page.
  if (!user_access('access tripal_hq user')) {
    return FALSE;
  }

  // The last type of allowed user is the submitter.
  $submission = tripal_hq_get_submission_by_id($submission_id);

  return $submission ? $user->uid == $submission->uid : FALSE;
}

/**
 * Implements hook_entity_delete().
 *
 * Delete submissions that have the deleted entity id if any exists.
 */
function tripal_hq_entity_delete($entity, $type) {
  if ($type !== 'TripalEntity') {
    return;
  }

  $submission = tripal_hq_submission_by_entity_id($entity->id);

  if (!empty($submission)) {
    tripal_hq_delete_submission($submission);
  }
}

/**
 * @implements hook_node_info()
 *
 * @return array
 *   The list of nodes that this module creates.
 */
function tripal_hq_node_info() {
  $nodes = [];

  $nodes['tripal_hq_nd'] = [
    'name'        => t('Tripal HQ Comments'),
    'description' => t(
      'Add comments about a submission. This node is auto created and should
         not be manually created.'
    ),
    'has_title'   => FALSE,
    'base'        => 'node_content',
  ];

  return $nodes;
}

/**
 * Create a new node. 
 *
 * @param string $title 
 *    The title for the node.
 *
 * @return int
 *   The node id.
 * @throws \Exception
 */
function tripal_hq_create_node(string $title) {
  global $user;

  $node        = new stdClass();
  $node->title = 'Comments for: ' . $title;
  $node->type  = "tripal_hq_nd";

  // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  node_object_prepare($node);

  // Or e.g. 'en' if locale is enabled.
  $node->language = LANGUAGE_NONE;
  $node->uid      = $user->uid;

  // Status is 1 or 0; published or not.
  $node->status = 1;

  // Promote is 1 or 0; promoted to front page or not.
  $node->promote = 0;

  // Comment is 0, 1, 2; 0 = disabled, 1 = read only, or 2 = read/write.
  $node->comment = 2;

  // Prepare node for saving.
  $node = node_submit($node);
  node_save($node);

  return $node->nid;
}

/**
 * Implements hook_node_access().
 */
function tripal_hq_node_access($node, $op, $account) {
  global $user;

  $type = is_string($node) ? $node : node_type_get_type($node);

  // If this node is not defined by tripal_hq, tell drupal that we don't care.
  if ($type !== 'tripal_hq_nd') {
    return NODE_ACCESS_IGNORE;
  }

  // The user is an admin. They shall pass!
  if (user_access('access tripal_hq admin')) {
    return NODE_ACCESS_ALLOW;
  }

  // Get the user id for the submission associated with this node.
  $submission = db_select('tripal_hq_submission', 'THS')
    ->fields('THS', ['uid'])
    ->condition('nid', $node->nid)
    ->execute()
    ->fetchObject();

  // We don't have a submission associated with this node ... DENY!
  if (!$submission) {
    return NODE_ACCESS_DENY;
  }

  // Allow the user to create comments if they created the submission.
  if ($op === 'view' && $user->uid == $submission->uid) {
    return NODE_ACCESS_ALLOW;
  }

  // Deny all other operations to none admins.
  return NODE_ACCESS_DENY;
}
